{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE AllowAmbiguousTypes #-}

--import TicTacToe
--import Board
--import Constraints

data N = N
data E = E
data X = X
data O = O

class Win a b c r | a b c->r
instance Win a a a a
instance {-# OVERLAPPABLE #-} Win a b c N

class T a b c d e f g h i res | a b c d e f g h i -> res
instance T p p p d e f g h i p
instance T a b c p p p g h i p
instance T a b c d e f p p p p

--whoWon :: (S a b c w1, S d e f w2, S g h i w3, W w1 w2 w3 ... wins ) => Board a b c d e f g h i->wins 

-- calculate winner from all 8 possibly winning triplets
class W a b c d e f g h wins | a b c d e f g h -> wins 
instance {-# OVERLAPPING #-} W N N N N N N N N N
instance W w N N N N N N N w
instance W N w N N N N N N w
instance W N N w N N N N N w
instance W N N N w N N N N w
instance W N N N N w N N N w
instance W N N N N N w N N w
instance W N N N N N N w N w
instance W N N N N N N N w w

---t :: W a b c r => (a,b,c)->r
--t _ = undefined

--w :: NoWins a b c d e f g h i r => (a,b,c,d,e,f,g,h,i) -> r 
--w _ = undefined

w' :: Win a b c r => (a,b,c) -> r 
w' _ = undefined

